<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="predict4java" default="full">

	<property environment="env"/>
	<property name="project" value="predict4java"/>

	<!-- Load from the project specific properties file first.
	     Any set here will NOT be overridden by the values in following files. -->
	<property file="${user.home}/.ant/${project}.build.properties"/>
	<property file="${user.home}/build.properties"/>
	<property file="${basedir}/${project}.build.properties"/>
	
	<!-- The version file name -->
	<property file="${basedir}/version.properties"/>
	<property file="${basedir}/build.number"/>

	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.src.main" value="${dir.src}/main"/>
	<property name="dir.src.test" value="${dir.src}/test"/>
	<property name="dir.src.acceptance" value="${dir.src}/acceptance"/>

	<property name="dir.resources" value="${basedir}/resources"/>
	<property name="dir.resources.main" value="${dir.resources}/main"/>
	<property name="dir.resources.test" value="${dir.resources}/test"/>
	<property name="dir.resources.acceptance" value="${dir.resources}/acceptance"/>

	<property name="dir.config" value="${basedir}/config"/>
	<property name="dir.config.main" value="${dir.config}/main"/>
	<property name="dir.config.test" value="${dir.config}/test"/>
	<property name="dir.config.build" value="${dir.config}/build"/>

	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.lib.main" value="${dir.lib}/main"/>
	<property name="dir.lib.test" value="${dir.lib}/test"/>
	<property name="dir.lib.build" value="${dir.lib}/build"/>
	<property name="dir.lib.acceptance" value="${dir.lib}/acceptance"/>

	<property name="dir.dist" value="${basedir}/dist"/>

	<property name="dir.docs" value="${basedir}/doc"/>
	<property name="dir.docs.api" value="${dir.docs}/api"/>

	<property name="dir.output" value="${basedir}/output"/>

	<property name="dir.output.classes" value="${dir.output}/classes"/>
	<property name="dir.output.classes.main" value="${dir.output.classes}/main"/>
	<property name="dir.output.classes.test" value="${dir.output.classes}/test"/>
	<property name="dir.output.classes.instrumented" value="${dir.output.classes}/instrumented"/>
	<property name="dir.output.classes.acceptance" value="${dir.output.classes}/acceptance"/>

	<property name="dir.output.reports" value="${dir.output}/reports"/>
	<property name="dir.output.reports.test" value="${dir.output.reports}/test"/>
	<property name="dir.output.reports.test.xml" value="${dir.output.reports.test}/xml"/>
	<property name="dir.output.reports.test.html" value="${dir.output.reports.test}/html"/>
	<property name="dir.output.reports.acceptance" value="${dir.output.reports}/acceptance"/>
	<property name="dir.output.reports.acceptance.xml" value="${dir.output.reports.acceptance}/xml"/>
	<property name="dir.output.reports.acceptance.html" value="${dir.output.reports.acceptance}/html"/>
	<property name="dir.output.reports.coverage" value="${dir.output.reports}/coverage"/>
	<property name="dir.output.reports.coverage.xml" value="${dir.output.reports.coverage}/xml"/>
	<property name="dir.output.reports.coverage.html" value="${dir.output.reports.coverage}/html"/>
	<property name="dir.output.reports.checkstyle" value="${dir.output.reports}/checkstyle"/>
	<property name="dir.output.reports.checkstyle.xml" value="${dir.output.reports.checkstyle}/xml"/>
	<property name="dir.output.reports.findbugs" value="${dir.output.reports}/findbugs"/>
	<property name="dir.output.reports.findbugs.xml" value="${dir.output.reports.findbugs}/xml"/>
	<property name="dir.output.reports.jdepend" value="${dir.output.reports}/jdepend"/>
	
	<property name="dir.output.deploy" value="${dir.output}/deploy"/>
	<property name="dir.output.war" value="${dir.output}/war"/>

	<property name="file.coverage.data" value="${dir.output.reports.coverage}/coverage.ser"/>

	<!-- where database schema definition files live -->
	<property name="schema.dir" value="${basedir}/database/schema" />
	<property name="database.dir" value="${basedir}/database" />
	<property name="schema.baseline.file" value="${schema.dir}/000_blank_database.xml"/>
	<property name="schema.changelog.file" value="${schema.dir}/websat.xml"/>
	
	<!-- properties file used to configure the environment for running unit tests -->
	<property name="test.jdbc.properties"
		value="${test.src.dir}/jdbc.properties" />

	<path id="path.classpath.main">
		<fileset dir="${dir.lib.main}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="path.classpath.web">
		<fileset dir="${dir.lib.web}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement path="${dir.output.classes.main}"/>
	</path>

	<path id="path.classpath.test">
		<fileset dir="${dir.lib.test}">
			<include name="**/*.jar"/>
		</fileset>
		<path refid="path.classpath.main"/>
		<path refid="path.classpath.build"/>
		<pathelement path="${dir.output.classes.main}"/>
		<pathelement path="${dir.output.classes.web}"/>
		<pathelement path="${dir.output.classes.test}"/>
	</path>

	<path id="path.classpath.build">
		<fileset dir="${dir.lib.build}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="path.classpath.cobertura">
		<fileset dir="${dir.lib.build}">
			<include name="cobertura/*.jar"/>
		</fileset>
	</path>

	<path id="path.classpath.checkstyle">
		<fileset dir="${dir.lib.build}">
			<include name="checkstyle*.jar"/>
		</fileset>
	</path>

	<path id="path.classpath.findbugs">
		<fileset dir="${dir.lib.build}">
			<include name="findbugs-ant*.jar"/>
		</fileset>
	</path>

	<path id="path.classpath.jdepend">
		<fileset dir="${dir.lib.build}">
			<include name="**/jdepend*.jar"/>
		</fileset>
	</path>

	<path id="path.classpath.crap4j">
		<fileset dir="${dir.lib.build}">
			<include name="**/crap4j*.jar"/>
		</fileset>
	</path>

	<property name="compile.debug" value="false"/>
	<property name="compile.deprecation" value="true"/>
	<property name="compile.optimize" value="true"/>

	<taskdef resource="tasks.properties" classpathref="path.classpath.cobertura" />
	<taskdef resource="checkstyletask.properties" classpathref="path.classpath.checkstyle" />
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		classpathref="path.classpath.findbugs" />
	<taskdef resource="liquibasetasks.properties" 
		classpathref="path.classpath.test"/>

	<!-- jdepend libraries must be on the global classpath, within ~/.ant/lib or specified with -lib
		 adding a reference within the build script seems to be ignored -->
	<available classname="jdepend.xmlui.JDepend" property="jdepend.available"/>

	<target name="all" description="build everything without an initial clean"
		depends="init, compile-main, checkstyle, checkstyle-additional, findbugs, unittest, coverage, jdepend, javadoc, jar">
	</target>

	<target name="checkstyle" description="runs checkstyle against the main code."
		depends="compile-main">
		<mkdir dir="${dir.output.reports.checkstyle.xml}"/>
		<checkstyle config="${dir.config.build}/checkstyle.xml" failonviolation="false">
			<fileset dir="${dir.src.main}">
				<include name="**/*.java"/>
			</fileset>
			<classpath>
				<pathelement path="${dir.output.classes.main}"/>
				<path refid="path.classpath.main"/>
				<path refid="path.classpath.build"/>
			</classpath>
			<formatter type="xml" tofile="${dir.output.reports.checkstyle.xml}/checkstyle.xml"/>
		</checkstyle>

		<xslt in="${dir.output.reports.checkstyle.xml}/checkstyle.xml" out="${dir.output.reports.checkstyle}/checkstyle.html" style="${dir.config.build}/checkstyle-noframes-sorted.xsl"/>
	</target>

	<target name="checkstyle-additional" description="optional task that runs additional checkstyle checks against the main code."
		depends="compile-main">
		<mkdir dir="${dir.output.reports.checkstyle.xml}"/>
		<checkstyle config="${dir.config.build}/checkstyle-additional.xml" failonviolation="false">
			<fileset dir="${dir.src.main}">
				<include name="**/*.java"/>
			</fileset>
			<classpath>
				<pathelement path="${dir.output.classes.main}"/>
				<path refid="path.classpath.main"/>
				<path refid="path.classpath.build"/>
			</classpath>
			<formatter type="xml" tofile="${dir.output.reports.checkstyle.xml}/checkstyle-additional.xml"/>
		</checkstyle>
		<style in="${dir.output.reports.checkstyle.xml}/checkstyle-additional.xml" out="${dir.output.reports.checkstyle}/checkstyle-additional.html" style="${dir.config.build}/checkstyle-noframes-sorted.xsl"/>
	</target>

	<target name="compile-main" description="compiles the main java classes."
		depends="init">
		<compile src="${dir.src.main}" dest="${dir.output.classes.main}" resources="${dir.resources.main}" classpathref="path.classpath.main"/>
	</target>

	<target name="compile-test" description="compiles the test java classes.">
		<compile src="${dir.src.test}" dest="${dir.output.classes.test}" resources="${dir.resources.test}" classpathref="path.classpath.test" />
	</target>

	<target name="coverage" description="checks the coverage of the unit tests"
		depends="unittest">
		<mkdir dir="${dir.output.reports.coverage.xml}"/>
		<mkdir dir="${dir.output.reports.coverage.html}"/>
		<cobertura-check branchrate="40" totallinerate="90" datafile="${file.coverage.data}" haltonfailure="false"/>
		<cobertura-report datafile="${file.coverage.data}" srcdir="${dir.src.main}" destdir="${dir.output.reports.coverage.html}" format="html" />
		<cobertura-report datafile="${file.coverage.data}" srcdir="${dir.src.main}" destdir="${dir.output.reports.coverage.xml}" format="xml" />
	</target>

	<target name="full" description="build everything with an initial clean"
		depends="init, all">
	</target>

	<target name="init" description="creates the required directories">
		<delete dir="${dir.dist}"/>
		<delete dir="${dir.docs}"/>
		<delete dir="${dir.output}"/>
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.docs}"/>
		<mkdir dir="${dir.output}"/>

		<tstamp>
			<format property="build.timeStamp" pattern="HH:mm:ss z, MMMM dd yyyy" timezone="GMT" locale="en,UK"/>
		</tstamp>

		<condition property="build.number" value="${env.BUILD_NUMBER}" else="DEVELOPMENT">
			<isset property="env.BUILD_NUMBER"/>
		</condition>
		<condition property="build.svnRevision" value="${env.SVN_REVISION}" else="DEVELOPMENT">
			<isset property="env.SVN_REVISION"/>
		</condition>
	</target>

	<!-- instruments all the main java classes ready for coverage tests. -->
	<target name="instrument" depends="compile-main">
		<delete file="${file.coverage.data}" />
		<delete dir="${dir.output.classes.instrumented}" />

		<cobertura-instrument datafile="${file.coverage.data}" todir="${dir.output.classes.instrumented}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${dir.output.classes.main}">
				<include name="**/*.class" />
				<!--
					Explicitly exclude GWT classes as these can not be tracked when running tests
					and hence skew the coverage stats.
				-->
				<exclude name="**/client/**"/>
				<exclude name="**/schedule/**"/>
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="javadoc" description="creates java doc for the main classes">
		<mkdir dir="${dir.docs.api}"/>
		<javadoc destdir="${dir.docs.api}" author="true" version="true" use="true" windowtitle="API" failonerror="false">
			<sourcepath path="${dir.src.main}"/>
			<packageset dir="${dir.src.main}"/>
			<classpath path="${dir.output.classes.main}"/>
			<classpath refid="path.classpath.main"/>
		</javadoc>
	</target>

	<!-- Display a warning if the jdepend libraries are not available -->
	<target name="check-jdependAvailable"
		unless="jdepend.available">

		<echo message="JDepend is not available - skipping" level="warning" />
	</target>

	<target name="jdepend" depends="compile-main, check-jdependAvailable" description="Runs JDepend analysis" if="jdepend.available">
		<mkdir dir="${dir.output.reports.jdepend}"/>
		<jdepend format="xml" outputfile="${dir.output.reports.jdepend}/jdepend-report.xml" >
			<classpath refid="path.classpath.jdepend"/>
			<classespath>
				<pathelement location="${dir.output.classes.main}"/>
			</classespath>
			<exclude name="java.*"/>
			<exclude name="javax.*"/>
			<exclude name="org.*"/>
			<exclude name="antlr.*"/>
			<exclude name="com.qtcgroup.*"/>
			<exclude name="com.puppycrawl.*"/>
			<exclude name="com.thoughtworks.*"/>
			<exclude name="edu.*"/>
			<exclude name="javax.*"/>
			<exclude name="junit.*"/>
			<exclude name="net.sourceforge.*"/>
			<exclude name="jdom.*"/>
			<exclude name="org.apache.*"/>
			<exclude name="org.hamcrest.*"/>
			<exclude name="org.jmock.*"/>
			<exclude name="org.junit.*"/>
			<exclude name="org.objectweb.*"/>
			<exclude name="org.springframework.*"/>
		</jdepend>
		<xslt in="${dir.output.reports.jdepend}/jdepend-report.xml" out="${dir.output.reports.jdepend}/jdepend.html" style="${ant.home}/etc/jdepend.xsl"/>
	</target>

	<target name="unittest" description="runs the unit tests."
		depends="compile-test, instrument">
		<mkdir dir="${dir.output.reports.test.xml}"/>
		<mkdir dir="${dir.output.reports.test.html}"/>

		<junit fork="yes" forkmode="once" printsummary="yes"  failureproperty="failure.unittest">
			<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${file.coverage.data}" />

			<classpath>
				<pathelement path="${dir.output.classes.instrumented}"/>
				<path refid="path.classpath.test"/>
				<path refid="path.classpath.build"/>
			</classpath>

			<formatter type="xml"/>

			<batchtest todir="${dir.output.reports.test.xml}">
				<fileset dir="${dir.src.test}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${dir.output.reports.test.xml}">
			<fileset dir="${dir.output.reports.test.xml}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${dir.output.reports.test.html}"/>
		</junitreport>
		<fail if="failure.unittest">
			One or more unit tests have failed.
		</fail>
	</target>

	<!-- Display a warning if the findbugs.home.dir property is not set -->
	<target name="check-findbugsAvailable"
		unless="findbugs.home.dir">

		<echo message="Findbugs is not available - skipping" level="warning" />
	</target>

	<target name="findbugs" description="runs findbugs against the main code if findbugs.home.dir property is set."
    	depends="compile-main, check-findbugsAvailable" if="findbugs.home.dir">
		<mkdir dir="${dir.output.reports.findbugs.xml}"/>
		<findbugs home="${findbugs.home.dir}"
                output="xml"
                outputFile="${dir.output.reports.findbugs.xml}/findbugs.xml" 
			 	jvmargs="-Xmx512M">
			<sourcePath path="${dir.src.main}" />
			<auxClasspath>
				<fileset dir="${dir.lib.main}">
					<include name="**/*.jar"/>
				</fileset>
			</auxClasspath>
			<class location="${dir.output.classes.main}" />
		</findbugs>
	</target>

	<target name="jar" description="Packages the distributables for the application"
		depends="canDoSvn,get-svn-revision" >
		<buildnumber />
		<jar file="${dir.dist}/predict4java_${version.majorminor}.${svn.revision}.${build.number}.jar" basedir="${dir.output.classes.main}"/>
	</target>
	
	<target name="canDoSvn">
		<condition property="can.do.svn">
			<available file="svn" type="file">
				<filepath>
					<pathelement path="${env.PATH}"/>
				</filepath>
			</available>
		</condition>
	</target>

	<target name="get-svn-revision" if="can.do.svn">
		<tempfile property="temp.file.for.get-svn-revision"/>
		<exec dir="." executable="svn" failonerror="true" output="${temp.file.for.get-svn-revision}">
			<arg line="info . --non-interactive"/>
		</exec>
		<loadproperties srcFile="${temp.file.for.get-svn-revision}">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="^Revision: "/>
				</linecontainsregexp>
				<tokenfilter>
					<containsregex pattern="^Revision: ([0-9]+)" replace="svn.revision=\1"/>
				</tokenfilter>
			</filterchain>
		</loadproperties>
		<delete quiet="true" file="${temp.file.for.get-svn-revision}"/>
		<echo message="svn.revision=${svn.revision}"/>
	</target>

	<macrodef name="compile">
		<attribute name="src" />
		<attribute name="dest" />
		<attribute name="resources" />
		<attribute name="classpathref" />
		<sequential>
			<mkdir dir="@{dest}" />
			<javac destdir="@{dest}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}"
				includeantruntime="false">

				<src path="@{src}" />
				<classpath refid="@{classpathref}" />
			</javac>

			<copy todir="@{dest}">
				<fileset dir="@{resources}">
					<include name="**" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>

</project>
